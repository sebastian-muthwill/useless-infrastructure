version: '3'
services:
  kafka:
    container_name: kafka
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      # This is sometimes not part of examples and will cause an "Temporary failure in name resolution" when trying to reach kafka from the host!
      # see: https://stackoverflow.com/questions/59899283/error-connecting-to-local-bitnami-docker-kafka-from-spring-boot-application
      #- KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT:kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    networks:
      - useless-net
  kafka-ui:
    container_name: kafkaui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: useless-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - useless-net
  init-kafka:
    container_name: kafka-init
    image: bitnami/kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic blog.new_blogposts --replication-factor 1 --partitions 4
      kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic blog.second_topic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:29092 --list
      "
    networks:
      - useless-net
  producer1:
    container_name: producer1
    build: ./producer
    depends_on:
      kafka:
        condition: service_started
    networks:
      - useless-net
  indexer1:
    container_name: indexer1
    build: ./indexer
    depends_on:
      kafka:
        condition: service_started
    networks:
      - useless-net
  # Opensearch container provides fast indexing and search
  opensearch:
    image: opensearchproject/opensearch:latest
    container_name: opensearch
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch
      - discovery.seed_hosts=opensearch
      - cluster.initial_cluster_manager_nodes=opensearch
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch:/usr/share/opensearch/data
    networks:
      - useless-net
  # The opensearch-dashboard is optional and can be commented out
  # Login credentials are admin admin on the first start ;-)
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: opensearch-dashboards
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
    networks:
      - useless-net

volumes:
  opensearch:

# we create one network where all the containers will have access to each other
networks:
  useless-net:
    name: useless-net
    driver: bridge
